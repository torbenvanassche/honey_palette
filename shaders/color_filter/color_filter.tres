[gd_resource type="Shader" format=3 uid="uid://clgt0a45gbdju"]

[resource]
code = "shader_type spatial;
render_mode depth_prepass_alpha, cull_back;

uniform sampler2D albedo_texture : source_color;
uniform sampler2D emission_texture : source_color;
uniform sampler2D normal_texture : hint_normal;
uniform bool force_texture =  false;
uniform bool use_emission = false;

uniform vec4 filter_colors[64];
uniform int palette_size = 64;

const vec4 fallback_color = vec4(0.3, 0.3, 0.3, 1.0);
const float COLOR_THRESHOLD = 0.01;

bool is_allowed(vec4 color) {
    for (int i = 0; i < palette_size; i++) {
        if (distance(color.rgb, filter_colors[i].rgb) < COLOR_THRESHOLD) {
            return true; 
        }
    }
    return false;
}

void fragment() {
    vec4 tex_color = texture(albedo_texture, UV);

    if (is_allowed(tex_color) || force_texture) {
        ALBEDO = tex_color.rgb;
        ALPHA = tex_color.a;
    } else {
        ALBEDO = fallback_color.rgb;
        ALPHA = fallback_color.a;
    }
	
	NORMAL_MAP = texture(normal_texture, UV).xyz;

	if (use_emission) {
		vec3 emission = texture(emission_texture, UV).rgb;
    	EMISSION = emission;
	}
}"
