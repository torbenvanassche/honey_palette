[gd_resource type="Shader" format=3 uid="uid://clgt0a45gbdju"]

[resource]
code = "shader_type spatial;
render_mode depth_prepass_alpha, cull_back;

instance uniform vec4 tint_color : source_color = vec4(1.0, 1.0, 1.0, 1.0);
instance uniform int color_mode : hint_enum(\"Grayscale\", \"Grayscale + Tint\", \"Tint Only\", \"Full Texture\") = 0;
instance uniform bool is_invisible = false;

uniform sampler2D albedo_texture : source_color;
uniform sampler2D emission_texture : source_color;
uniform sampler2D normal_texture : hint_normal;

uniform bool tint_as_emission = false;
uniform bool use_emission = false;

void fragment() {
    if (is_invisible) {
        ALPHA = 0.0;
        discard;
    }

    vec4 tex_color = texture(albedo_texture, UV);
    vec3 final_color;

    if (color_mode == 0) {
        float gray = dot(tex_color.rgb, vec3(0.299, 0.587, 0.114));
        final_color = vec3(gray);
    } else if (color_mode == 1) {
        float gray = dot(tex_color.rgb, vec3(0.299, 0.587, 0.114));
        final_color = vec3(gray) * tint_color.rgb;
    } else if (color_mode == 2) {
        final_color = tint_color.rgb;
    } else {
        final_color = tex_color.rgb;
    }

    ALBEDO = final_color;
    ALPHA = tex_color.a * tint_color.a;
    NORMAL_MAP = texture(normal_texture, UV).xyz;

    if (use_emission) {
        vec3 emission = texture(emission_texture, UV).rgb;
        if (tint_as_emission) {
            emission = tint_color.rgb;
        }
        EMISSION = emission;
    }
}
"
